enum OrderStatus {
  NEW
  COOKING
  READY_FOR_PICKUP
  PICKED_UP
  COMPLETED
  DECLINED_BY_RESTAURANT
}

type OrderDish @model @auth(rules: [{allow: public}]) {
  id: ID!
  quantity: Int
  Dish: Dish @hasOne
  orderID: ID! @index(name: "byOrder")
}

type Order @model @auth(rules: [{allow: public}]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  Restaurant: Restaurant @hasOne
  total: Float
  status: OrderStatus!
  OrderDishes: [OrderDish] @hasMany(indexName: "byOrder", fields: ["id"])
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  Baskets: [Basket] @hasMany(indexName: "byUser", fields: ["id"])
  name: String
  address: String
  lat: Float
  lng: Float
  sub: String
  Orders: [Order] @hasMany(indexName: "byUser", fields: ["id"])
}

type Basket @model @auth(rules: [{allow: public}]) {
  id: ID!
  userID: ID! @index(name: "byUser")
  restaurantID: ID! @index(name: "byRestaurant")
  BasketDishes: [BasketDish] @hasMany(indexName: "byBasket", fields: ["id"])
}

type BasketDish @model @auth(rules: [{allow: public}]) {
  id: ID!
  quantity: Int
  basketID: ID! @index(name: "byBasket")
  Dish: Dish @hasOne
}

type Dish @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  image: String
  description: String
  price: Float!
  restaurantID: ID! @index(name: "byRestaurant")
}

type Restaurant @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  deliveryFee: Float
  minDeliveryTime: Int
  maxDeliveryTime: Int
  rating: Float
  image: String
  address: String
  lat: Float
  lng: Float
  Baskets: [Basket] @hasMany(indexName: "byRestaurant", fields: ["id"])
  Dishes: [Dish] @hasMany(indexName: "byRestaurant", fields: ["id"])
  logo: String
  adminSub: String
}
 